
Node.js is a very powerful JavaScript-based platform built on Google Chrome's JavaScript V8 Engine.
Node.js = Runtime Environment + JavaScript Library

* Node.js is an open source server environment.
* Node.js allows you to run JavaScript on the server.
* Node.js is an open source server environment
* Node.js is free
* Node.js runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
* Node.js uses JavaScript on the server
* Node.js uses asynchronous programming!
	PHP or ASP handles a file request:
		Sends the task to the computer's file system.
		Waits while the file system opens and reads the file.
		Returns the content to the client.
		Ready to handle the next request.
	Here is how Node.js handles a file request:
		Sends the task to the computer's file system.
		Ready to handle the next request.
		When the file system has opened and read the file, the server returns the content to the client.
		Node.js eliminates the waiting, and simply continues with the next request.
* Node.js runs single-threaded, non-blocking, asynchronously programming, which is very memory efficient.

What Can Node.js Do?
* Node.js can generate dynamic page content
* Node.js can create, open, read, write, delete, and close files on the server
* Node.js can collect form data
* Node.js can add, delete, modify data in your database
What is a Node.js File?
* Node.js files contain tasks that will be executed on certain events
* A typical event is someone trying to access a port on the server
* Node.js files must be initiated on the server before having any effect
* Node.js files have extension ".js"

Where to Use Node.js?
I/O bound Applications
Data Streaming Applications
Data Intensive Real-time Applications (DIRT)
JSON APIs based Applications
Single Page Applications

Where Not to Use Node.js?
It is not advisable to use Node.js for CPU intensive applications.

We use the require directive to load Node.js modules.

Node comes bundled with a REPL environment.
Read − Reads user's input, parses the input into JavaScript data-structure, and stores in memory.
Eval − Takes and evaluates the data structure.
Print − Prints the result.
Loop − Loops the above command until the user presses ctrl-c twice.